{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "install requirements",
      "type": "shell",
      "command": "if (-Not (Test-Path .\\env\\Scripts\\activate)) { python -m venv env; .\\env\\Scripts\\activate; pip install -r requirements.txt } else { .\\env\\Scripts\\activate; pip install -r requirements.txt }",
      "windows": {
        "command": "if (-Not (Test-Path .\\env\\Scripts\\activate)) { python -m venv env; .\\env\\Scripts\\activate; pip install -r requirements.txt } else { .\\env\\Scripts\\activate; pip install -r requirements.txt }"
      },
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "runOptions": {
        "runOn": "folderOpen"
      },
      "problemMatcher": []
    },
    {
      "label": "Run django liveserver",
      "type": "shell",
      "command": "if (Test-Path .\\env\\Scripts\\activate) { .\\env\\Scripts\\activate; python manage.py livereload }",
      "windows": {
        "command": "if (Test-Path .\\env\\Scripts\\activate) { .\\env\\Scripts\\activate; python manage.py livereload }"
      },
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "runOptions": {
        "runOn": "folderOpen"
      },
      "dependsOn": "install requirements",
      "problemMatcher": []
    },
    {
      "label": "Run server",
      "type": "shell",
      "command": "if (Test-Path .\\env\\Scripts\\activate) {timeout 1; .\\env\\Scripts\\activate; python manage.py runserver }",
      "windows": {
        "command": "if (Test-Path .\\env\\Scripts\\activate) {timeout 1; .\\env\\Scripts\\activate; python manage.py runserver }"
      },
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      },
      "runOptions": {
        "runOn": "folderOpen"
      },
      "dependsOn": "install requirements",
      "problemMatcher": []
    },
    {
      "label": "migrations",
      "type": "shell",
      "command": "if (Test-Path .\\env\\Scripts\\activate) { .\\env\\Scripts\\activate; python manage.py makemigrations; python manage.py migrate }",
      "windows": {
        "command": "if (Test-Path .\\env\\Scripts\\activate) { .\\env\\Scripts\\activate; python manage.py makemigrations; python manage.py migrate }"
      },
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Run frontend rtlcss converter",
      "type": "shell",
      "command": "cd ./frontend; npm run watch",
      "group": "none",
      "presentation": {
        "reveal": "silent",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Generate Fixtures for users",
      "type": "shell",
      "command": "${workspaceFolder}\\users\\tests\\dumpData.bat",
      "args": ["${input:parameter}"],
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared",
      },
      "problemMatcher": []
    },
    {
      "label": "run tests",
      "type": "shell",
      "command": "if (Test-Path .\\env\\Scripts\\activate) { .\\env\\Scripts\\activate; python manage.py test ${input:parameter}.tests }",
      "windows": {
        "command": "if (Test-Path .\\env\\Scripts\\activate) { .\\env\\Scripts\\activate; python manage.py test ${input:parameter}.tests }"
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "deploy and runserver",
      "type": "shell",
      "command": "${workspaceFolder}\\utils\\batScripts\\deploy.bat",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "panel": "shared"
      },
      "dependsOn": "install requirements",
      "problemMatcher": []
    },
    {
      "label": "deploy and runserver linux",
      "type": "shell",
      "command": "echo ${input:password} | sudo -S ${workspaceFolder}/utils/batScripts/deploy.bash",
      "presentation": {
        "echo": true,
        "panel": "shared",
        "reveal": "silent",
        "revealProblems": "onProblem",
        "close": true
      },
      "problemMatcher": []
    },
  ],
  "inputs": [
    {
      "id": "parameter",
      "description": "parameter",
      "type": "promptString"
    },
    {
      "id": "password",
      "type": "promptString",
      "description": "Enter your password",
      "password": true,
    }
  ]
}
